exit
nexit
n
n1
n1.children
@right
right
left
@left
n1.children
queue
n1
next
node.left
node.value
node
queue
n
next
n
queue
n
next
queue
next
node
exit
root
exit
node_data
self
next
right.search(node_data)
right
data
node_data
next
node_data < data
self.right.right
self.right
self.left.left.left.left
self.left.left.left
self.left.left
self.left
self.data
self
data
node_data
exit
next
node
data
self
next
@data
data
node
next
data.nil?
data
node
next
self.data
@data
data
node
exit
sorted_right_array
sorted_left_array
exit
right_array = numbers.drop(half_of_size)
left_array  = numbers.take(half_of_size)
new_arr = numbers.each_slice(split_length).to_a
split_length = numbers.size/2.round
    half_of_size = (array_size / 2).round
array_size   = numbers.size
new_arr = numbers.each_slice(split_length).to_a
split_length
exit
new_arr = numbers.each_slice(split_length).to_a
numbers
split_length
exit
right_arr
left_arr
smallest_number
next
smallest_number
next
exit
smallest_number
right_arr
left_arr
exit
[92].shift
[4].shift
[4]
sorted_right_array
sorted_left_array
exit
right_arr = new_arr[1]
right_arr
left_arr
